game_data <- readRDS("data.rds")
head(game_data)

# Load necessary libraries
library(dplyr)

# Read the dataset
game_data <- readRDS("data.rds")

# Get a list of unique teams
teams <- unique(c(game_data$Visiting_Team, game_data$Home_Team))
num_teams <- length(teams)

# Create an empty transition matrix
transition_matrix <- matrix(0, nrow = num_teams, ncol = num_teams, dimnames = list(teams, teams))


# Fill in the matrix based on game outcomes
for (i in 1:nrow(game_data)) {
  home_team <- game_data$Home_Team[i]
  away_team <- game_data$Visiting_Team[i]
  
  home_score <- game_data$Home_Score[i]
  away_score <- game_data$Visiting_Score[i]
  
  if (home_score > away_score) {
    transition_matrix[away_team, home_team] <- transition_matrix[away_team, home_team] + 1
  } else if (away_score > home_score) {
    transition_matrix[home_team, away_team] <- transition_matrix[home_team, away_team] + 1
  }
}

# Normalize each row to ensure it's a valid probability matrix
transition_matrix <- transition_matrix / rowSums(transition_matrix, na.rm = TRUE)


set.seed(42)  # For reproducibility

# Number of iterations
total_iterations <- 20000
burn_in <- 1000  # First 1000 transitions are ignored

# Initialize coin with a random team
current_team <- sample(teams, 1)

# Store counts of how often each team holds the coin
coin_counts <- setNames(rep(0, num_teams), teams)

# Perform random walk
for (i in 1:total_iterations) {
  # Get the transition probabilities for the current team
  probabilities <- transition_matrix[current_team, ]
  
  # Choose the next team based on transition probabilities
  next_team <- sample(teams, 1, prob = probabilities, replace = TRUE)
  
  # Update team coin counts (ignore burn-in period)
  if (i > burn_in) {
    coin_counts[next_team] <- coin_counts[next_team] + 1
  }
  
  # Move to next team
  current_team <- next_team
}

# Convert counts to probabilities (percentage of time each team held the coin)
rankings <- data.frame(Team = names(coin_counts), Score = coin_counts / sum(coin_counts))

# Sort rankings in descending order
rankings <- rankings %>% arrange(desc(Score))

# Print final rankings
print(rankings)


# Part 2: Analyze seasonal trends in team rankings using PageRank
library(ggplot2)
library(dplyr)

# Prepare to collect rankings across all seasons
seasons <- unique(game_data$season)
all_rankings <- data.frame()

# Get top 5 teams from Part 1 rankings for comparison
top_teams <- head(rankings$Team, 5)  # Use rankings from Part 1

for (s in seasons) {
  # Subset data for the current season
  season_subset <- game_data[game_data$season == s, ]
  teams_s <- unique(c(season_subset$Visiting_Team, season_subset$Home_Team))
  n_teams_s <- length(teams_s)
  
  # Initialize transition matrix for the season
  trans_counts <- matrix(0, nrow = n_teams_s, ncol = n_teams_s,
                         dimnames = list(teams_s, teams_s))
  
  # Populate transition counts for each season
  for (i in 1:nrow(season_subset)) {
    game <- season_subset[i, ]
    visitor <- game$Visiting_Team
    home <- game$Home_Team
    v_score <- game$Visiting_Score
    h_score <- game$Home_Score
    
    if (v_score < h_score) {
      loser <- visitor
      winner <- home
    } else if (v_score > h_score) {
      loser <- home
      winner <- visitor
    } else {
      next
    }
    
    trans_counts[loser, winner] <- trans_counts[loser, winner] + 1
  }
  
  # Normalize the transition matrix using same method from p1
  row_sums <- rowSums(trans_counts)
  if (any(row_sums == 0)) {
    trans_counts[row_sums == 0, ] <- 1
    row_sums[row_sums == 0] <- n_teams_s
  }
  trans_matrix <- trans_counts / row_sums
  
  # Compute seasonal steady-state based on p1
  b_season <- matrix(rep(1/n_teams_s, n_teams_s), nrow = 1)
  for (i in 1:1000) {
    b_season <- b_season %*% trans_matrix
  }
  
  # Store rankings
  steady_state_season <- as.vector(b_season)
  names(steady_state_season) <- teams_s
  ranked_teams <- names(sort(steady_state_season, decreasing = TRUE))
  
  rankings_df <- data.frame(
    season = s,
    team = teams_s,
    rank = match(teams_s, ranked_teams),  
    pagerank = steady_state_season
  )
  
  all_rankings <- rbind(all_rankings, rankings_df)
}

# Filter for top teams from Part 1 
seasonal_top <- all_rankings %>% 
  filter(team %in% top_teams) %>%
  arrange(season, rank)

# Convert season to ordered factor for proper plotting
seasonal_top$season <- factor(seasonal_top$season, 
                             levels = sort(unique(seasons)))

# Create the plot (FIXED: use rank for y-axis)
ggplot(seasonal_top, aes(x = season, y = rank, color = team, group = team)) +
  geom_line(linewidth = 1) +
  geom_point(size = 2) +
  scale_y_reverse(breaks = 1:30) +  # Better ranking visualization
  labs(title = "Seasonal Rankings of Top 5 Teams per Part 1 (2014-2024)",
       x = "Season", y = "PageRank Rank", color = "Team") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggsave("seasonal_rankings.png", width = 10, height = 6)
